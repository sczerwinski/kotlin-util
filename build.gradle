group groupId
version libVersion
description = libDescription

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    testImplementation "junit:junit:$junitVersion"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            def output = "${result.resultType} (" +
                    "${result.testCount} tests, " +
                    "${result.successfulTestCount} passed, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped)"
            def repeatLength = output.length()
            println('\n' + ('=' * repeatLength) + '\n' + desc.name + '\n' + output + '\n' + ('=' * repeatLength))
        }
    }
}

dokka {
    moduleName = libDescription
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar, dependsOn: project.classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task dokkaJar(type: Jar, dependsOn: project.dokka) {
    archiveClassifier.set('javadoc')
    from dokka
}

artifacts {
    archives sourcesJar
    archives dokkaJar
}

if (hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = "$groupId"
        pom.artifactId = "$artifactId"
        pom.version = "$libVersion"

        pom.project {

            name libName
            packaging 'jar'
            description libDescription
            url libUrl

            scm {
                connection 'scm:git:https://github.com/sczerwinski/kotlin-util.git'
                developerConnection 'scm:git:https://github.com/sczerwinski/kotlin-util.git'
                url 'https://github.com/sczerwinski/kotlin-util'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                }
            }

            developers {
                developer {
                    id 'sczerwinski'
                    name 'Slawomir Czerwinski'
                    email 'slawomir@czerwinski.it'
                }
            }
        }

        if (System.getenv('SONATYPE_USERNAME') != null) {

            println("Upload archives destination: Sonatype")

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(
                        userName: System.getenv('SONATYPE_USERNAME'),
                        password: System.getenv('SONATYPE_PASSWORD')
                )
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(
                        userName: System.getenv('SONATYPE_USERNAME'),
                        password: System.getenv('SONATYPE_PASSWORD')
                )
            }

        } else if (project.hasProperty('ossrhUsername')) {

            println("Upload archives destination: Sonatype")

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

        } else {

            println("Upload archives destination: local directory")

            repository(url: "file://${buildDir}/release/$libVersion")

        }
    }
}
